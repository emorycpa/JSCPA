<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
    xmlns:x-trumba="http://schemas.trumba.com/rss/x-trumba"
    xmlns:x-microsoft="http://schemas.microsoft.com/x-microsoft"
    xmlns:xCal="urn:ietf:params:xml:ns:xcal">
    <xsl:output method="text" omit-xml-declaration="yes" media-type="application/json" />
    <xsl:param name="responce" />
    <xsl:param name="message" />
    <xsl:param name="refresh" />
    <xsl:param name="num" />
    <xsl:param name="url" />
    <xsl:template match="/">
        <xsl:text>{</xsl:text>
        <xsl:text>"configuration" : {</xsl:text>
        <xsl:call-template name="get-configuration" />
        <xsl:text>} ,</xsl:text>
        <xsl:if test="error">
            <xsl:text>"error" : true ,</xsl:text>
        </xsl:if>
        <xsl:text>"trumba" : {</xsl:text>
        <xsl:apply-templates mode="rss" select="//rss/channel"/>
        <xsl:text>}</xsl:text>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="get-configuration">
        <xsl:text>"response" : </xsl:text>
        <xsl:call-template name="js-value">
            <xsl:with-param name="value-to-convert" select="$responce"/>
        </xsl:call-template>
        <xsl:text> , </xsl:text>
        <xsl:text>"message" : </xsl:text>
        <xsl:call-template name="js-value">
            <xsl:with-param name="value-to-convert" select="$message"/>
        </xsl:call-template>
        <xsl:text> , </xsl:text>
        <xsl:text>"refresh" : </xsl:text>
        <xsl:call-template name="js-value">
            <xsl:with-param name="value-to-convert" select="$refresh"/>
        </xsl:call-template>
        <xsl:text> , </xsl:text>
        <xsl:text>"number" : </xsl:text>
        <xsl:call-template name="js-value">
            <xsl:with-param name="value-to-convert" select="$num"/>
        </xsl:call-template>
        <xsl:text> , </xsl:text>
        <xsl:text>"url" : </xsl:text>
        <xsl:call-template name="js-value">
            <xsl:with-param name="value-to-convert" select="$url"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template match="channel" mode="rss">
        <xsl:apply-templates select="title" mode="node-to-name-value" />
        <xsl:apply-templates select="description" mode="node-to-name-value" />
        <xsl:apply-templates select="link" mode="node-to-name-value" />
        <xsl:apply-templates select="language" mode="node-to-name-value" />
        <xsl:apply-templates select="lastBuildDate" mode="node-to-name-value" />
        <xsl:text>"xcal" : {</xsl:text>
        <xsl:for-each select="xCal:*">
            <xsl:apply-templates select="." mode="node-to-name-value">
                <xsl:with-param name="name" select="local-name(.)"/>
                <xsl:with-param name="last" select="string(position() = last())"/>
            </xsl:apply-templates>
        </xsl:for-each>
        <xsl:text>} , </xsl:text>
        <!--<xsl:apply-templates mode="node-to-name-value" select="*[local-name() != 'image'][local-name() != 'item']"/>-->
        <xsl:apply-templates mode="feed-image" select="image"/>
        <xsl:text>"items" : [</xsl:text>
        <xsl:choose>
            <xsl:when test="string(number($num)) != 'NaN'">
                <xsl:for-each select="item">
                    <xsl:if test="(number($num) &gt; position()) or (number($num) = position())">
                        <xsl:apply-templates mode="feed-item" select=".">
                            <xsl:with-param name="last" select="string(number($num) = position() or position() = last())"/>
                        </xsl:apply-templates>
                    </xsl:if>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:for-each select="item">
                    <xsl:apply-templates mode="feed-item" select=".">
                        <xsl:with-param name="last" select="string(position() = last())"/>
                    </xsl:apply-templates>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>]</xsl:text>
    </xsl:template>
    <xsl:template match="node()" mode="feed-item">
        <xsl:param name="last"/>
        <xsl:text>{</xsl:text>
        <!--<xsl:apply-templates mode="node-to-name-value" select="*[local-name() != 'title'][local-name() != 'customfield']"/><xsl:apply-templates mode="node-to-name-value" select="xCal:description" />-->
        <xsl:text>"last": "</xsl:text>
        <xsl:value-of select="$last"/>
        <xsl:text>",</xsl:text>
        <xsl:apply-templates select="description" mode="node-to-name-value" />
        <xsl:apply-templates select="link" mode="node-to-name-value" />
        <xsl:apply-templates select="category" mode="node-to-name-value" />
        <xsl:apply-templates select="pubDate" mode="node-to-name-value" />
        <xsl:apply-templates select="guid" mode="node-to-name-value" />
        <xsl:text>"trumba" : {</xsl:text>
        <xsl:for-each select="x-trumba:*">
            <xsl:apply-templates select="." mode="node-to-name-value">
                <xsl:with-param name="name">
                    <xsl:choose>
                        <xsl:when test="local-name(.) = 'customfield'">
                            <xsl:value-of select="@name" />
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="local-name(.)" />
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:with-param>
                <xsl:with-param name="last" select="string(position() = last())"/>
            </xsl:apply-templates>
        </xsl:for-each>
        <xsl:text>} , </xsl:text>
        <xsl:text>"xcal" : {</xsl:text>
        <xsl:for-each select="xCal:*">
            <xsl:apply-templates select="." mode="node-to-name-value">
                <xsl:with-param name="name" select="local-name(.)"/>
                <xsl:with-param name="last" select="string(position() = last())"/>
            </xsl:apply-templates>
        </xsl:for-each>
        <xsl:text>} , </xsl:text>
        <xsl:apply-templates mode="node-to-name-value" select="title">
            <xsl:with-param name="last" select="'true'"/>
        </xsl:apply-templates>
        <xsl:text>}</xsl:text>
        <xsl:if test="$last != 'true'">
            <xsl:text>,</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template match="node()" mode="feed-image">
        <xsl:param name="last"/>
        <xsl:text>"image" : {</xsl:text>
        <xsl:for-each select="*">
            <xsl:apply-templates mode="node-to-name-value" select=".">
                <xsl:with-param name="last" select="string(position() = last())"/>
            </xsl:apply-templates>
        </xsl:for-each>
        <xsl:text>}</xsl:text>
        <xsl:if test="$last != 'true'">
            <xsl:text>,</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template match="*" mode="node-to-name-value">
        <xsl:param name="last"/>
        <xsl:param name="name"/>
        <xsl:choose>
            <xsl:when test="string($name) != ''">
                <xsl:call-template name="escape-js-string">
                    <xsl:with-param name="text-string" select="$name"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-js-string">
                    <!--<xsl:with-param name="text-string" select="local-name(.)"/>-->
                    <xsl:with-param name="text-string" select="name(.)"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text> : </xsl:text>
        <xsl:call-template name="js-value">
            <xsl:with-param name="value-to-convert" select="."/>
        </xsl:call-template>
        <xsl:if test="$last != 'true'">
            <xsl:text>,</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="js-value">
        <xsl:param name="value-to-convert" />
        <xsl:choose>
            <xsl:when test="string(number($value-to-convert)) != 'NaN'">
                <xsl:value-of select="$value-to-convert"/>
            </xsl:when>
            <xsl:when test="translate($value-to-convert, 'TRUE', 'true') = 'true'">
                <xsl:text>true</xsl:text>
            </xsl:when>
            <xsl:when test="translate($value-to-convert, 'FALSE', 'false') = 'false'">
                <xsl:text>false</xsl:text>
            </xsl:when>
            <xsl:when test="string($value-to-convert) = ''">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-js-string">
                    <xsl:with-param name="text-string" select="$value-to-convert"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="escape-js-string">
        <xsl:param name="text-string"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="replace">
            <xsl:with-param name="text">
                <xsl:call-template name="replace">
                    <xsl:with-param name="text">
                        <xsl:call-template name="replace">
                            <xsl:with-param name="text">
                                <xsl:call-template name="replace">
                                    <xsl:with-param name="text">
                                        <xsl:call-template name="replace">
                                            <xsl:with-param name="text" select="translate($text-string,'&#xA;&#xD;&#x9;', '   ')"/>
                                            <xsl:with-param name="replace">
                                                <xsl:text>\</xsl:text>
                                            </xsl:with-param>
                                            <xsl:with-param name="by">
                                                <xsl:text>\\</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:with-param>
                                    <xsl:with-param name="replace">
                                        <xsl:text>/</xsl:text>
                                    </xsl:with-param>
                                    <xsl:with-param name="by">
                                        <xsl:text>\/</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:with-param>
                            <xsl:with-param name="replace">
                                <xsl:text>"</xsl:text>
                            </xsl:with-param>
                            <xsl:with-param name="by">
                                <xsl:text>\"</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                    </xsl:with-param>
                    <xsl:with-param name="replace">
                        <xsl:text>&lt;</xsl:text>
                    </xsl:with-param>
                    <xsl:with-param name="by">
                        <xsl:text disable-output-escaping="yes">&lt;</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
            </xsl:with-param>
            <xsl:with-param name="replace">
                <xsl:text>&amp;</xsl:text>
            </xsl:with-param>
            <xsl:with-param name="by">
                <xsl:text disable-output-escaping="yes">&amp;</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    <xsl:template name="replace">
        <xsl:param name="text"/>
        <xsl:param name="replace"/>
        <xsl:param name="by"/>
        <xsl:choose>
            <xsl:when test="contains($text, $replace)">
                <xsl:value-of select="substring-before($text,$replace)"/>
                <xsl:value-of select="$by"/>
                <xsl:call-template name="replace">
                    <xsl:with-param name="text" select="substring-after($text,$replace)"/>
                    <xsl:with-param name="replace" select="$replace"/>
                    <xsl:with-param name="by" select="$by"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$text"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
</xsl:stylesheet>